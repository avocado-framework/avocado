# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See LICENSE for more details.
#
# Copyright: Red Hat Inc. 2013-2014
# Author: Lucas Meneghel Rodrigues <lmr@redhat.com>

import os
import sys

from avocado.plugins import plugin
from avocado.core import output
from avocado.core import error_codes
from avocado import multiplex_config


class Multiplexer(plugin.Plugin):

    """
    Implements the avocado 'multiplex' functionality.
    """

    name = 'plugins_list'
    enabled = True

    def configure(self, app_parser, cmd_parser):
        myparser = cmd_parser.add_parser('multiplex',
                                         help='Generate a list of dictionaries with params from a multiplex file')

        myparser.add_argument('multiplex_file', type=str,
                              help='Path to a multiplex file ',
                              nargs='?', default=None)

        myparser.add_argument('-c', '--contents', action='store_true',
                              help=('Keep temporary files generated by tests. '
                                    'Default: %(defaults)'), default=False)

        myparser.set_defaults(func=self.multiplex)
        self.configured = True

    def multiplex(self, args):
        bcolors = output.colors
        pipe = output.get_paginator()
        multiplex_file = os.path.abspath(args.multiplex_file)

        if not os.path.isfile(multiplex_file):
            pipe.write(bcolors.fail_header_str('Invalid multiplex file %s' % multiplex_file))
            sys.exit(error_codes.numeric_status['AVOCADO_JOB_FAIL'])

        try:
            parser = multiplex_config.Parser(filename=multiplex_file)
        except Exception, details:
            fail_class = details.__class__.__name__
            pipe.write(bcolors.fail_header_str("Multiplex file '%s' has a syntax error\n" % multiplex_file))
            pipe.write('%s: %s\n' % (fail_class, details))
            pipe.write(bcolors.fail_header_str('Aborting...'))
            sys.exit(error_codes.numeric_status['AVOCADO_JOB_FAIL'])

        pipe.write(bcolors.header_str('Dictionaries generated:'))
        pipe.write('\n')
        for (index, dct) in enumerate(parser.get_dicts()):
            pipe.write('    dict %s:    %s\n' % (index+1, dct.get('shortname')))
            if args.contents:
                for key in sorted(dct.keys()):
                    pipe.write('        %s = %s\n' % (key, dct.get(key)))
        sys.exit(error_codes.numeric_status['AVOCADO_ALL_OK'])
