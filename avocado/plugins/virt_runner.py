# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See LICENSE for more details.
#
# Copyright: Red Hat Inc. 2013-2014
# Author: Lucas Meneghel Rodrigues <lmr@redhat.com>

import os

from avocado.core import exceptions
from avocado import job
from avocado.plugins import runner


class VirtJob(job.Job):

    def update_extra_params(self):
        if self.args.qemu_bin:
            if not os.path.isfile(self.args.qemu_bin):
                raise exceptions.JobError("QEMU binary path %s does not exist" %
                                          self.args.qemu_bin)
            self.extra_params['qemu_bin'] = self.args.qemu_bin


class VirtTestRunner(runner.TestRunner):

    """
    Implements the avocado 'run-virt' functionality.
    """

    name = 'virt_test_runner'
    enabled = True

    def configure(self, app_parser, cmd_parser):
        """
        Add the subparser for the run-virt action.

        :param parser: Main test runner parser.
        """
        myparser = cmd_parser.add_parser('run-virt', help=('Run a list of test modules '
                                                           'or dropin tests '
                                                           '(space separated)'))

        myparser.add_argument('url', type=str,
                              help=('Test module names or paths to dropin tests '
                                    '(space separated)'),
                              nargs='?', default=None)

        myparser.add_argument('-z', '--archive', action='store_true', default=False,
                              help='Archive (ZIP) files generated by tests.')

        myparser.add_argument('-m', '--multiplex-file', type=str,
                              help=('Path to an avocado multiplex '
                                    '(.mplex) file '),
                              nargs='?', default=None)

        myparser.add_argument('--qemu-bin', type=str,
                              help=('Path to a qemu binary '),
                              nargs='?', default=None)

        myparser.add_argument('--keep-tmp-files', action='store_true',
                              help=('Keep temporary files generated by tests. '
                                    'Default: %(defaults)'), default=False)

        myparser.add_argument('--unique-id', type=str, default=None,
                              help=('Unique Job id. Used by a server when job '
                                    'was created at the server and run on a '
                                    'different test machine'))

        myparser.set_defaults(func=self.run_tests)
        self.configured = True

    def run_tests(self, args):
        """
        Run test modules or dropin tests.

        :param args: Command line args received from the run subparser.
        """
        job_instance = VirtJob(args)
        return job_instance.run()
