====================
CIT Varianter Plugin
====================

Base Combinatorial Interaction Testing plugin. It  implementas the basic
Avocado optional plugin infrastructure to be used as base for the CIT Plugin
implementation.

Files:

- ``optional_plugins/varianter_cit/avocado_varianter_cit/__init__.py``: The
  plugin implementation. Your CIT implementation code goes here.

- ``examples/varianter_cit/params.ini``: The parameters file used in this demo
  implementation.

- ``examples/tests/test_cit.py``: The test file used in this demo
  implementation.

To see the variants generated by this demo implementation, execute::

    $ avocado variants --cit-parameter-file examples/varianter_cit/params.ini
    CIT Variants (12):
    Variant a-x-foo-6e95:    /run
    Variant a-x-bar-5bef:    /run
    Variant a-y-foo-efe6:    /run
    Variant a-y-bar-c1c0:    /run
    Variant b-x-foo-69ea:    /run
    Variant b-x-bar-c514:    /run
    Variant b-y-foo-8d31:    /run
    Variant b-y-bar-98b3:    /run
    Variant c-x-foo-3735:    /run
    Variant c-x-bar-afc1:    /run
    Variant c-y-foo-6366:    /run
    Variant c-y-bar-556b:    /run

You can enable more verbosity, making each variant to show its content::

    $ avocado variants --cit-parameter-file examples/varianter_cit/params.ini -c
    CIT Variants (12):

    Variant a-x-foo-6e95:    /run
        /p1:p1 => a
        /p2:p2 => x
        /p3:p3 => foo

    Variant a-x-bar-5bef:    /run
        /p1:p1 => a
        /p2:p2 => x
        /p3:p3 => bar

    Variant a-y-foo-efe6:    /run
        /p1:p1 => a
        /p2:p2 => y
        /p3:p3 => foo

    Variant a-y-bar-c1c0:    /run
        /p1:p1 => a
        /p2:p2 => y
        /p3:p3 => bar

    Variant b-x-foo-69ea:    /run
        /p1:p1 => b
        /p2:p2 => x
        /p3:p3 => foo

    Variant b-x-bar-c514:    /run
        /p1:p1 => b
        /p2:p2 => x
        /p3:p3 => bar

    Variant b-y-foo-8d31:    /run
        /p1:p1 => b
        /p2:p2 => y
        /p3:p3 => foo

    Variant b-y-bar-98b3:    /run
        /p1:p1 => b
        /p2:p2 => y
        /p3:p3 => bar

    Variant c-x-foo-3735:    /run
        /p1:p1 => c
        /p2:p2 => x
        /p3:p3 => foo

    Variant c-x-bar-afc1:    /run
        /p1:p1 => c
        /p2:p2 => x
        /p3:p3 => bar

    Variant c-y-foo-6366:    /run
        /p1:p1 => c
        /p2:p2 => y
        /p3:p3 => foo

    Variant c-y-bar-556b:    /run
        /p1:p1 => c
        /p2:p2 => y
        /p3:p3 => bar

To execute the test, use::

    $ avocado run passtest.py --cit-parameter-file examples/varianter_cit/params.ini
    JOB ID     : a1c0a00949b436fd0d619e092d0ac28da4317512
    JOB LOG    : $HOME/avocado/job-results/job-2018-04-10T11.42-a1c0a00/job.log
     (01/12) passtest.py:PassTest.test;a-x-foo-6e95: PASS (0.02 s)
     (02/12) passtest.py:PassTest.test;a-x-bar-5bef: PASS (0.02 s)
     (03/12) passtest.py:PassTest.test;a-y-foo-efe6: PASS (0.03 s)
     (04/12) passtest.py:PassTest.test;a-y-bar-c1c0: PASS (0.02 s)
     (05/12) passtest.py:PassTest.test;b-x-foo-69ea: PASS (0.03 s)
     (06/12) passtest.py:PassTest.test;b-x-bar-c514: PASS (0.03 s)
     (07/12) passtest.py:PassTest.test;b-y-foo-8d31: PASS (0.03 s)
     (08/12) passtest.py:PassTest.test;b-y-bar-98b3: PASS (0.03 s)
     (09/12) passtest.py:PassTest.test;c-x-foo-3735: PASS (0.02 s)
     (10/12) passtest.py:PassTest.test;c-x-bar-afc1: PASS (0.04 s)
     (11/12) passtest.py:PassTest.test;c-y-foo-6366: PASS (0.02 s)
     (12/12) passtest.py:PassTest.test;c-y-bar-556b: PASS (0.02 s)
    RESULTS    : PASS 12 | ERROR 0 | FAIL 0 | SKIP 0 | WARN 0 | INTERRUPT 0 | CANCEL 0
    JOB TIME   : 1.19 s
    JOB HTML   : $HOME/avocado/job-results/job-2018-04-10T11.42-a1c0a00/results.html
