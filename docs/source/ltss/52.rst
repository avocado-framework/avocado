52.0
====

Switching from 36.4 to 52.0
---------------------------

Installation
^^^^^^^^^^^^

All the previously supported ways to install Avocado are still valid and
few new ones were added, but beware that Avocado was split into several
optional plugins so you might want to adjust your scripts/workflows.

* Multiplexer (the YAML parser which used to generate variants) was
  turned into an optional plugin ``yaml_to_mux`` also known as
  ``avocado_framework_plugin_varianter_yaml_to_mux``. Without it Avocado
  does not require PyYAML, but you need it to support the parsing of
  YAML files to variants (unless you use a different plugin with similar
  functionality, which is now also possible).
* The HTML result plugin is now also an optional plugin so one has to
  install it separately.
* The remote execution features (``--remote-hostname``, ``--vm-domain``,
  ``--docker``) were also turned into optional plugins so if you need
  those you need to install them separately.
* Support for virtual environment (``venv``) was greatly improved and we
  do encourage people who want to use ``pip`` to do that via this method.

As for the supported ways:

* Fedora/RHEL can use our custom repositories, either LTS-only or all
  releases. Note that latest versions (non-lts) are also available
  directly in Fedora and also in EPEL.
* OpenSUSE - Ships the 36 LTS versions, hopefully they'll start
  shipping the 52 ones as well (but we are not in charge of that
  process)
* Debian - The ``contrib/packages/debian`` script is still available,
  although un-maintained for a long time
* PyPI/pip - Avocado as well as all optional plugins are available in
  PyPI and can be installed via ``pip install avocado-framework\*``,
  or selectively one by one.
* From source - Makefile target ``install`` is still available but it
  does not install the optional plugins. You have to install them one
  by one by going to their directory (eg. ``cd optional_plugins/html``
  and running ``sudo python setup.py install``.

As before you can find the details in :ref:`Installing Avocado`.

Usage
^^^^^

.. note:: As mentioned in previous section some previously core
   features were turned into optional plugins. Do check your install
   script if some command described here are missing on your system.

Most workflows should work the same, although there are few little
changes and a few obsoleted constructs which are still valid, but you
should start using the new ones.

The hard changes which does not provide backward compatibility:

* Human result was tweaked a bit:
    * The ``TESTS`` entry (displaying number of tests) was removed as
      one can easily get this information from ``RESULTS``.
    * Instead of tests time (sum of test times) you get job time
      (duration of the job execution) in the human result
* Json results also contain some changes:
    * They are pretty-printed
    * As ``cancel`` status was introduced, json result contain an entry
      of number of canceled tests (``cancel``)
    * url was renamed to id (url entry is to be removed in ``53.0`` so
      this is actually a soft change with a backward compatibility support)
* The ``avocado multilex|variants`` does not expect multiplex YAML
  files as positional arguments, one has to use ``-m|--mux-yaml``
  followed by one or more paths.
* Test variants are not serialized numbers anymore in the default
  ``yaml_to_mux`` (``multiplexer``), but ordered list of leaf-node names
  of the variant followed by hash of the variant content
  (paths+environment). Therefor instead of ``my_test:1`` you can get
  something like ``my_test:arm64-virtio_scsi-RHEL7-4a3c``.
* ``results.tap`` is now generated by default in job results along the
  ``results.json`` and ``results.xml`` (unless disabled)
* The ``avocado run --replay`` and ``avocado diff`` are unable to parse
  results generated by ``36.4`` to this date. We should be able to
  introduce such feature with not insignificant effort, but no one was
  interested yet.

And the still working but to be removed in ``53.0`` constructs:

* The long version of the ``-m|--multiplex`` argument available in
  ``avocado run|multiplex|variants`` was renamed to ``-m|--mux-yaml``
  which corresponds better to the rest of ``--mux-*`` arguments.
* The ``avocado multiplex`` was renamed to ``avocado variants``
* The ``avocado multiplex|variants`` arguments were reworked to better
  suite the possible multiple varianter plugins:

    * Instead of picking between ``tree`` representation of list of
      variants one can use ``--summary``, resp ``--variants`` followed
      by verbosity, which supersedes ``-c|contents``, ``-t|--tree``,
      ``-i|--inherit``
    * Instead of ``--filter-only|--filter-out`` the
      ``--mux-filter-only|--mux-filter-out`` are available
    * The ``--mux-path`` is now also available in
      ``avocado multiplex|variants``


Test API
^^^^^^^^

Main features stayed the same, there are few new ones so do check our
documentation for details. Anyway while porting tests you should pay
attention to following changes:

* If you were overriding ``avocado.Test`` attributes (eg. ``name``,
  ``params``, ``runner_queue``, ...) you'll get an
  ``AttributeError: can't set attribute`` error as most of them were
  turned into properties to avoid accidental override of the important
  attributes.
* The ``tearDown`` method is now executed almost always (always when the
  ``setUp`` is entered), including when the test is interrupted while
  running ``setUp``. This might require some changes to your ``setUp``
  and ``tearDown`` methods but generally it should make them simpler.
  (See :ref:`Setup and cleanup methods` and following chapters for details)
* Test exceptions are publicly available directly in ``avocado``
  (``TestError``, ``TestFail``, ``TestCancel``) and when raised inside
  test they behave the same way as ``self.error``, ``self.fail`` or
  ``self.cancel``. (See :mod:`avocado`)
* New status is available called ``CANCEL``. It means the test (or even
  just ``setUp``) started but the test does not match prerequisites. It's
  similar to ``SKIP`` in other frameworks, but the ``SKIP`` result is
  reserved for tests that were not executed (nor the ``setUp`` was
  entered). The ``CANCEL`` status can be signaled by ``self.cancel`` or
  by raising ``avocado.TestCancel`` exception and the ``SKIP`` should be
  set only by ``avocado.skip``, ``avocado.skipIf`` or
  ``avocado.skipUnless`` decorators. The ``self.skip`` method is still
  supported but will be removed after in ``53.0`` so you should replace
  it by ``self.cancel`` which has similar meaning but it additionally
  executes the ``tearDown``. (See :ref:`Test statuses`
* The ``tag`` argument of ``avocado.Test`` was removed as it is part of
  ``name``, which can only be ``avocado.core.test.TestName`` instance.
  (See :meth:`avocado.core.test.Test`)
* The ``self.job.logdir`` which used to be abused to share state/data
  between tests inside one job can now be dropped towards the
  ``self.teststmpdir``, which is a shared temporary directory which
  sustains throughout job execution and even between job executions if
  set via ``AVOCADO_TESTS_COMMON_TMPDIR`` environmental value. (See
  :meth:`avocado.core.test.Test.teststmpdir`)
* Those who write inherited test classes will be pleasantly surprised as
  it is now possible to mark a class as avocado test including all
  ``test*`` methods coming from all parent classes (similarly to how
  dynamic discovery works inside python unittest, see
  :ref:`docstring-directive-recursive` for details)
* The ``self.text_output`` is not published after the test execution. If
  you were using it simply open the ``self.logfile`` and read the content
  yourself.

Utils API
^^^^^^^^^

Focusing only on the changes you might need to adjust the usage of:

* ``avocado.utils.build.make`` calls as it now reports only
  ``exit_status``. To get the full result object you need to execute
  ``avocado.utils.build.run_make``.
* ``avocado.utils.distro`` reports ``Red Hat Enterprise Linux``/``rhel``
  instead of ``Red Hat``/``redhat``.
* ``avocado.process`` where the check for availability of ``sudo`` was
  improved, which might actually start executing some code which used
  to fail in 36.4.

Also see the :mod:`avocado.utils` for complete list of available utils
as there were many additions between 36.4 and 52.0.
